/// 
/// \file main.cpp
/// \brief Точка входа в приложение
/// \details Основная функция программы:
/// 1. Создает экземпляр контроллера приложения
/// 2. Запускает основной цикл работы через AppController::run()
/// 3. Возвращает код завершения
/// \note Для работы требует предварительной настройки:
/// - Корректной реализации AppController
/// - Рабочего сетевого подключения (если используется)
/// \see AppController для деталей работы приложения
///

///
/// \brief Главная функция приложения
/// \param[in] argc Количество аргументов командной строки
/// \param[in] argv Массив аргументов командной строки
/// \return Код завершения приложения (0 при успешном завершении)
/// \retval 0 Приложение завершилось успешно
/// \retval -1 Ошибка подключения к серверу
/// \par Пример использования:
/// \code
/// ./math_server_app
/// \endcode
/// \note Для работы приложения должен быть запущен сервер на localhost:33333
/// \warning При отсутствии сервера приложение завершится с ошибкой
///

#include <QApplication>
#include <QTcpSocket>
#include "AppController.h"

/// \brief Основная функция приложения
/// \details Создает экземпляр QApplication, устанавливает соединение с сервером,
/// инициализирует контроллер приложения и запускает основной цикл обработки событий.
/// \param argc Количество аргументов командной строки
/// \param argv Массив аргументов командной строки
/// \return Результат выполнения приложения
int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    /// \var socket
    /// \brief Сокет для соединения с сервером
    QTcpSocket* socket = new QTcpSocket();

    /// \brief Устанавливаем соединение с сервером
    /// \details Подключаемся к серверу на localhost, порт 33333
    socket->connectToHost("127.0.0.1", 33333);

    /// \brief Ожидаем соединения с сервером
    /// \details Если соединение не установлено в течение 3 секунд, выводим сообщение об ошибке
    if (!socket->waitForConnected(3000)) {
        qDebug() << "Не удалось подключиться к серверу:" << socket->errorString();
        return -1;  // Завершаем приложение с ошибкой
    }

    /// \var controller
    /// \brief Основной контроллер приложения
    /// \details Инициализируется сокетом для работы с сервером
    AppController controller(socket);

    /// \brief Запускаем основной цикл работы контроллера
    controller.run();

    /// \brief Запускаем основной цикл обработки событий приложения
    return app.exec();
}